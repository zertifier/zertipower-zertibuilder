generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int         @id @default(autoincrement())
  username              String      @db.VarChar(255)
  firstname             String      @db.VarChar(255)
  lastname              String      @db.VarChar(255)
  password              String      @db.VarChar(255)
  email                 String      @unique(map: "email") @db.VarChar(255)
  wallet_address        String?     @db.VarChar(255)
  created_at            DateTime    @default(now())
  updated_at            DateTime    @default(now()) @updatedAt
  recover_password_code String?
  role_id               Int
  UserOatuh             UserOatuh[]
  tokens                Token[]
  role                  Role        @relation(fields: [role_id], references: [id])

  @@index([role_id], map: "users_role_id_fkey")
  @@map("users")
}

model UserOatuh {
  oauth_id String
  type     String
  user_id  Int
  user     User   @relation(fields: [user_id], references: [id])

  @@id([oauth_id, user_id])
  @@index([user_id], map: "user_oauth_user_id_fkey")
  @@map("user_oauth")
}

model Permission {
  resource       String
  action         String
  RolePermission RolePermission[]

  @@id([resource, action])
  @@map("permissions")
}

model RolePermission {
  role_id             Int
  permission_resource String
  permission_action   String
  allow               Boolean
  permission          Permission @relation(fields: [permission_resource, permission_action], references: [resource, action], onDelete: Cascade)
  role                Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_action, permission_resource])
  @@index([permission_resource, permission_action], map: "role_permission_permission_resource_permission_action_fkey")
  @@map("role_permission")
}

model Token {
  token           String   @unique @db.VarChar(300)
  expiration_time DateTime
  user_id         Int
  user            User     @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "user_tokens_user_id_fkey")
  @@map("user_tokens")
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(255)
  RolePermission RolePermission[]
  users          User[]

  @@map("roles")
}

model Report {
  id         Int      @id @default(autoincrement())
  name       String
  sql        String
  params     String
  columns    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("reports")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Calendar {
  day         DateTime? @unique(map: "day") @map("day") @db.Date
  weekday     String?   @map("weekday") @db.VarChar(50)
  dayType     String?   @map("day_type") @db.VarChar(50)
  festiveType String?   @map("festive_type") @db.VarChar(50)
  festivity   String?   @map("festivity") @db.VarChar(50)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt   DateTime? @default(now()) @map("created_at") @db.DateTime(0)

  @@map("calendar")
}

model Communities {
  id          Int       @id @default(autoincrement()) @map("id")
  name        String?   @map("name") @db.VarChar(50)
  createdAt   DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.DateTime(0)
  test        Int?      @default(dbgenerated("(current_timestamp())")) @map("test") @db.TinyInt
  energyPrice Float?    @map("energy_price")
  lat         Float?
  lng         Float?

  @@map("communities")
}

model Cups {
  id                           Int        @id @default(autoincrement()) @map("id")
  cups                         String     @default("") @map("cups") @db.VarChar(50)
  providerId                   Int        @default(0) @map("provider_id")
  communityId                  Int        @default(0) @map("community_id")
  ubication                    String     @default("") @map("ubication") @db.VarChar(50)
  customerId                   Int?       @map("customer_id")
  lng                          Float?
  lat                          Float?
  surplus_distribution_default String?    @db.LongText
  type                         cups_type?
  createdAt                    DateTime?  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt                    DateTime?  @updatedAt @map("updated_at") @db.DateTime(0)

  @@map("cups")
}

model Customers {
  id            Int       @id @default(autoincrement()) @map("id")
  name          String?   @map("name") @db.VarChar(50)
  createdAt     DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime? @updatedAt @map("updated_at") @db.DateTime(0)
  walletAddress String?   @map("wallet_address") @db.VarChar(200)

  @@map("customers")
}

model EnergyBlocks {
  id               Int       @id @default(autoincrement()) @map("id")
  reference        String    @default("0") @map("reference") @db.VarChar(50)
  expirationDt     DateTime? @map("expiration_dt") @db.DateTime(0)
  activeInit       DateTime  @default(dbgenerated("('00:00:00')")) @map("active_init") @db.Time(0)
  activeEnd        DateTime  @default(dbgenerated("('00:00:00')")) @map("active_end") @db.Time(0)
  consumptionPrice Float?    @map("consumption_price")
  generationPrice  Float?    @map("generation_price")
  provider_id      Int       @default(0)
  createdAt        DateTime  @default(dbgenerated("(curdate())")) @map("created_at") @db.DateTime(0)
  updatedAt        DateTime? @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)

  @@map("energy_blocks")
}

model EnergyTransactions {
  id            Int       @id @default(autoincrement()) @map("id")
  cupsId        Int?      @map("cups_id")
  infoDt        DateTime? @map("info_dt") @db.DateTime(0)
  kwhIn         Float?    @map("kwh_in")
  kwhOut        Float?    @map("kwh_out")
  kwhSurplus    Float?    @map("kwh_surplus")
  kwh_in_price  Float?
  kwh_out_price Float?
  tx_kwh_in     String?   @db.VarChar(100)
  tx_kwh_out    String?   @db.VarChar(100)
  blockId       Int?      @map("block_id")
  createdAt     DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime? @updatedAt @map("updated_at") @db.DateTime(0)

  @@map("energy_transactions")
}

model EnergyRegisters {
  id          Int       @id @default(autoincrement()) @map("id")
  infoDt      DateTime? @map("info_dt") @db.DateTime(0)
  cupsId      Int?      @map("cups_id")
  import      Float?    @map("import")
  consumption Float?    @map("consumption")
  export      Float?    @map("export")
  generation  Float?    @map("generation")
  createdAt   DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.DateTime(0)

  @@index([cupsId], map: "cups_id")
  @@index([infoDt], map: "info_dt")
  @@map("energy_registers")
}

model Providers {
  id       Int     @id @default(autoincrement()) @map("id")
  provider String? @map("provider") @db.VarChar(50)

  @@map("providers")
}

model SmartContracts {
  id              Int     @id @default(autoincrement()) @map("id")
  name            String  @default("0") @db.VarChar(50)
  contractAddress String? @map("contract_address") @db.VarChar(100)
  blockchainId    Int?    @map("blockchain_id")

  @@map("smart_contracts")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model blockchains {
  blockchain_id     Int?
  blockchain_name   String? @db.VarChar(50)
  rpc_url           String? @db.VarChar(50)
  blockchain_tx_url String? @db.VarChar(50)

}

model energy_area_coordinates {
  id             Int     @id @default(autoincrement())
  energy_area_id Int     @default(0)
  lat            Decimal @default(0.000000) @db.Decimal(20, 6)
  lng            Decimal @default(0.000000) @db.Decimal(20, 6)
}

model energy_areas {
  id                  Int       @id @default(autoincrement())
  reference           String?   @db.VarChar(50)
  inclination         Float?
  kWh_p               Float?
  kWh_inversor        Float?
  n_plaques           Int?
  creation_dt         DateTime? @default(dbgenerated("(curdate())")) @db.DateTime(0)
  update_dt           DateTime? @db.Timestamp(0)
  type                String?   @db.VarChar(50)
  origin              String?   @default("CatastRo") @db.VarChar(50)
  m2                  Int?
  cadastral_reference String?   @db.VarChar(50)
  geojson_feature     String?   @db.LongText
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view energy_registers_original_monthly {
  cups_id     Int?
  year        Int?
  month       Int?
  import      Float?
  consumption Float?
  export      Float?
  generation  Float?
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view energy_registers_original_hourly {
  cups_id       Int?
  info_datetime DateTime? @db.DateTime(0)
  import        Float?
  consumption   Float?
  export        Float?
  generation    Float?

}

enum cups_type {
  consumer
  producer
  prosumer
}
