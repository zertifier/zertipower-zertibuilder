openapi: 3.0.3
info:
  title: Realtime energy API 1.0
  description: |-
    This is the Ris3Cat realtime energy API v.1.0 documentation.
    
    Some useful links:
    - [The API repository](https://github.com/zertifier/zertipower-zertibuilder)
    - [The client web app](https://comptador.zertipower.com/user/integrations)
    - [The Zertipower project documentation](https://www.zertipower.com/)
  termsOfService: terms
  contact:
    email: info@zertifier.com
  version: 1.0.0
servers:
  - url: https://api-public-ris3cat.zertifier.com
    description: Production server
  - url: https://dev-api-public-ris3cat.zertifier.com
    description: Development server
  - url: http://localhost:3000
    description: Development server
tags:
  - name: checks
    description: Inspections on backend.
  - name: tokens
    description: Interact with user permanent tokens. Zertipower auth token is necessary.
  - name: cups
    description: Interact with cups. Zertipower auth token is necessary.
  - name: communities
    description: Interact with communities.
paths:
  /is-alive:
    get:
      tags:
        - checks
      summary: Check if the server is running
      description: If the server answer, its alive
      operationId: getIsAlive
      responses:
        '200':
          description: 'server is alive'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isAliveResponse'

  /version:
    get:
      tags:
        - checks
      summary: Check the API version
      description: returns the number of the version
      operationId: getVersion
      responses:
        '200':
          description: 'version of the API'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionResponse'

  /tokens/:
    post:
      tags:
        - tokens
      summary: Obtain permanent token
      description: Get permanent token or creates one if dont exist for the user
      operationId: obtainPermanentToken
      security:
        - temporalToken: []  
      responses:
        '200':
          description: 'obtain token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenResponse'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerError'

  /tokens/refresh:
    post:
      tags:
        - tokens
      summary: Change permanent token
      description: Get permanent token or creates one if dont exist for the user
      operationId: refreshPermanentToken
      security:
        - permanentToken: []   
      responses:
        '200':
          description: 'refresh token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refreshTokenResponse'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerError'

  /cups/:
    get:
      tags:
        - cups
      summary: Obtain all cups from a customer
      description: Get all customer cups description data
      operationId: obtainAllCustomerCups
      security:
        - permanentToken: []     
      responses:
        '200':
          description: 'obtain all customer cups sucessfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cupsResponse'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerError'

  # /cups/by-id:
  #   get:
  #     tags:
  #       - cups
  #     summary: Obtain cups by id
  #     description: Get cups description data
  #     operationId: obtainCupsById
  #     security:
  #       - permanentToken: []   
  #     responses:
  #       '200':
  #         description: 'obtain cups by cups id'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/cupsByIdResponse'
  #       '404':
  #         description: 'Not found'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/notFound'
  #       '500':
  #         description: 'Internal server error'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/internalServerError'
                
  /cups/energy/by-id/by-date:
    get:
      tags:
        - cups
      summary: Get energy data by cups ID and date
      description: Retrieve energy data for a specific cups within a date range
      operationId: getEnergyDataByCupsIdAndDate
      security:
        - permanentToken: []   
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
          description: Cups ID
        - name: date
          in: query
          required: true
          schema:
            type: string
            example: "17/02/2024"
          description: Date for the query (DD/MM/YYYY)
        - name: dateFormat
          in: query
          required: true
          schema:
            type: string
            enum: [hourly, daily, weekly, yearly]
          description: Format of the date (hourly, daily, weekly, yearly)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cupsByDataByIdResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerError'

  /cups/energy/realtime:
    get:
      tags:
        - cups
      summary: Get current hour energy data from customer cups
      description: Get current hour energy data from customer cups
      operationId: getCurrentCustomerCupsEnergyData
      security:
        - permanentToken: []   
      responses:
        '200':
          description: 'Customer cups energy data from current hour fetched successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerCupsCurrentHourEnergyResponse'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerError'

  /cups/{id}/energy/realtime:
    get:
      tags:
        - cups
      summary: Get current hour energy data from customer cups by cups id
      description: Get current hour energy data from customer cups by cups id
      operationId: getCurrentCustomerCupsEnergyDataById
      security:
        - permanentToken: []   
      parameters:
        - in: path
          name: id
          shema: 
            type: integer
          required: true
          description: cups id
      responses:
        '200':
          description: 'Customer cups energy data from current hour fetched successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerCupsCurrentHourEnergyByIdResponse'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerError'

  /communities:
    get:
      tags:
        - communities
      summary: Obtain all communities
      description: Get all communities description data
      operationId: obtainAllCommunnities
      responses:
        '200':
          description: 'obtain all communities'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/communitiesResponse'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerError'

  /communities/by-id:
    get:
      tags:
        - communities
      summary: Obtain community by id
      description: Get community description data
      operationId: obtainCommunnityById
      responses:
        '200':
          description: 'obtain community by community id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/communitiesByIdResponse'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerError'
                
  /communities/energy/by-id/by-date:
    get:
      tags:
        - communities
      summary: Get energy data by community ID and date
      description: Retrieve energy data for a specific community within a date range
      operationId: getEnergyDataByCommunityIdAndDate
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
          description: Community ID
        - name: date
          in: query
          required: true
          schema:
            type: string
            example: "17/02/2024"
          description: Date for the query (DD/MM/YYYY)
        - name: dateFormat
          in: query
          required: true
          schema:
            type: string
            enum: [hourly, daily, weekly, yearly]
          description: Format of the date (hourly, daily, weekly, yearly)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/communitiesByDataByIdResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerError'
components:
  schemas:

    isAliveResponse:
      type: string

    versionResponse:
      type: string

    cupsResponse:
      type: object
      description: Indicates whether the cups obtaining was successful.
      properties:
        ok:
          type: boolean
          example: true
        data:
          type: array
          items: 
            type: object
          description: CupsInformation

    cupsByIdResponse:
      type: object
      description: Indicates that cups obtaining was successful.
      properties:
        ok:
          type: boolean
          example: true
        data:
          type: object
          description: CupsInformation

    customerCupsCurrentHourEnergyResponse:
      type: object
      description: Indicates that cups energy obtaining was successful.
      properties:
        ok:
          type: boolean
          example: true
        data:
          type: array
          description: CupsInformationArray
          items: 
            type: object
            description: CupsInformation

    customerCupsCurrentHourEnergyByIdResponse:
      type: object
      description: Indicates that cups energy obtaining was successful.
      properties:
        ok:
          type: boolean
          example: true
        data:
          type: object
          description: CupsInformation

    cupsByDataByIdResponse:
      type: object
      description: Indicates whether the cups energy obtaining was successful.
      properties:
        ok:
          type: boolean
          example: true
        message:
          type: string
        data:
          type: object
          properties:
            totalIn:
              type: number
            totalOut:
              type: number
            energyData:
              type: array
              items:
                type: object

    communitiesResponse:
      type: object
      description: Indicates whether the communities obtaining was successful.
      properties:
        ok:
          type: boolean
          example: true
        data:
          type: array
          items: 
            type: object
          description: CommunityInformation

    communitiesByIdResponse:
      type: object
      description: Indicates that community obtaining was successful.
      properties:
        ok:
          type: boolean
          example: true
        data:
          type: object
          description: CommunityInformation

    communitiesByDataByIdResponse:
      type: object
      description: Indicates whether the communities obtaining was successful.
      properties:
        ok:
          type: boolean
          example: true
        message:
          type: string
        data:
          type: object
          properties:
            totalIn:
              type: number
            totalOut:
              type: number
            energyData:
              type: array
              items:
                type: object

    tokenResponse:
      type: object
      properties:
        ok:
          type: boolean
          description: Indicates whether the token obtaining was successful.
          example: true
        token:
          type: string
          description: User token with 'Bearer ' prefix.
          example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjIxMDE2NzQ2LCJleHAiOjE2MjEwMjA5NDZ9.Azh_tVmS8OHeJ2IXjV7-2Mw5C5un5UL5G5vVb9-hH0M
   
    refreshTokenResponse:
      type: object
      properties:
        ok:
          type: boolean
          description: Indicates whether the token renewal was successful.
          example: true
        token:
          type: string
          description: User token with 'Bearer ' prefix.
          example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjIxMDE2NzQ2LCJleHAiOjE2MjEwMjA5NDZ9.Azh_tVmS8OHeJ2IXjV7-2Mw5C5un5UL5G5vVb9-hH0M
   
    internalServerError:
      type: object
      properties:
        ok:
          type: boolean
          example: false
        msg:
          type: string
          example: Internal server error
 
    notFound:
      type: object
      properties:
        ok:
          type: boolean
          example: false
        msg:
          type: string
          example: Registers not found
 
  securitySchemes:
    permanentToken:
      type: apiKey
      name: authorization
      in: header
    temporalToken: 
      type: apiKey
      name: authorization
      in: header
    