generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int         @id @default(autoincrement())
  customer_id           Int?
  username              String      @db.VarChar(255)
  firstname             String      @db.VarChar(255)
  lastname              String      @db.VarChar(255)
  password              String      @db.VarChar(255)
  email                 String      @db.VarChar(255)
  wallet_address        String?     @db.VarChar(255)
  created_at            DateTime    @default(now())
  updated_at            DateTime    @default(now()) @updatedAt
  recover_password_code String?
  role_id               Int
  UserOatuh             UserOatuh[]
  role                  Role        @relation(fields: [role_id], references: [id])

  @@index([email], map: "email")
  @@index([role_id], map: "users_role_id_fkey")
  @@map("users")
}

model UserOatuh {
  oauth_id String
  type     String
  user_id  Int
  user     User   @relation(fields: [user_id], references: [id])

  @@id([oauth_id, user_id])
  @@index([user_id], map: "user_oauth_user_id_fkey")
  @@map("user_oauth")
}

model Permission {
  resource       String
  action         String
  RolePermission RolePermission[]

  @@id([resource, action])
  @@map("permissions")
}

model RolePermission {
  role_id             Int
  permission_resource String
  permission_action   String
  allow               Boolean
  permission          Permission @relation(fields: [permission_resource, permission_action], references: [resource, action], onDelete: Cascade)
  role                Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_action, permission_resource])
  @@index([permission_resource, permission_action], map: "role_permission_permission_resource_permission_action_fkey")
  @@map("role_permission")
}

model Token {
  id              Int      @id @default(autoincrement())
  token           String   @db.VarChar(500)
  expiration_time DateTime
  user_id         Int
  permanent       Int

  @@map("user_tokens")
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(255)
  RolePermission RolePermission[]
  users          User[]

  @@map("roles")
}

model Report {
  id         Int      @id @default(autoincrement())
  name       String
  sql        String
  params     String
  columns    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("reports")
}

model Blockchains {
  blockchainId    Int     @id @map("blockchain_id")
  blockchainName  String? @map("blockchain_name") @db.VarChar(50)
  rpcUrl          String? @map("rpc_url") @db.VarChar(50)
  blockchainTxUrl String? @map("blockchain_tx_url") @db.VarChar(50)

  @@map("blockchains")
}

model Calendar {
  day         DateTime  @unique(map: "day") @db.Date
  weekday     String?   @db.VarChar(50)
  dayType     String?   @map("day_type") @db.VarChar(50)
  festiveType String?   @map("festive_type") @db.VarChar(50)
  festivity   String?   @db.VarChar(50)
  updatedAt   DateTime? @default(now()) @map("updated_at") @db.DateTime(0)
  createdAt   DateTime? @default(now()) @map("created_at") @db.DateTime(0)

  @@map("calendar")
}

model Communities {
  id            Int         @id @default(autoincrement())
  name          String?     @db.VarChar(50)
  test          Int?        @default(dbgenerated("(current_timestamp())")) @db.TinyInt
  energyPrice   Float?      @map("energy_price")
  tradeType     TradeTypes? @default(PREFERRED) @map("trade_type")
  lat           Float?
  lng           Float?
  daoAddress    String?     @map("dao_address") @db.VarChar(50)
  walletAddress String?     @map("wallet_address") @db.VarChar(150)
  walletPwd     String?     @map("wallet_pwd") @db.VarChar(150)
  daoName       String?     @map("dao_name") @db.VarChar(255)
  daoSymbol     String?     @map("dao_symbol") @db.VarChar(50)
  locationId    Int?        @map("location_id")
  createdAt     DateTime?   @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime?   @map("updated_at") @db.DateTime(0)

  @@map("communities")
}

model Cups {
  id                  Int       @id @default(autoincrement())
  cups                String    @default("") @db.VarChar(50)
  reference           String?   @db.VarChar(255)
  providerId          Int       @default(0) @map("provider_id")
  communityId         Int       @default(0) @map("community_id")
  surplusDistribution Float?    @map("surplus_distribution")
  locationId          Int       @default(0) @map("location_id")
  address             String    @default("") @db.VarChar(50)
  customerId          Int?      @map("customer_id")
  lng                 Float?
  lat                 Float?
  type                CupsType?
  active              Boolean?  @default(true) @map("active") @db.TinyInt
  datadisActive       Boolean?  @default(false) @map("datadis_active") @db.TinyInt
  datadisUser         String?   @map("datadis_user") @db.VarChar(50)
  datadisPassword     String?   @map("datadis_password") @db.VarChar(100)
  smartMeterActive    Boolean?  @default(false) @map("smart_meter_active") @db.TinyInt
  smartMeterModel     String    @default("") @map("smart_meter_model") @db.VarChar(100)
  smartMeterApiKey    String?   @map("smart_meter_api_key") @db.VarChar(50)
  inverterActive      Boolean   @default(false) @map("inverter_active") @db.TinyInt
  inverterModel       String?   @map("inverter_model") @db.VarChar(100)
  inverterApiKey      String?   @map("inverter_api_key") @db.VarChar(50)
  sensorActive        Boolean   @default(false) @map("sensor_active") @db.TinyInt
  sensorModel         String?   @map("sensor_model") @db.VarChar(100)
  sensorApiKey        String?   @map("sensor_api_key") @db.VarChar(50)
  createdAt           DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt           DateTime? @map("updated_at") @db.DateTime(0)

  @@map("cups")
}

model Customers {
  id            Int       @id @default(autoincrement())
  name          String?   @db.VarChar(50)
  dni           String?   @db.VarChar(50)
  email         String?   @db.VarChar(50)
  balance       Float?
  walletAddress String?   @map("wallet_address") @db.VarChar(200)
  createdAt     DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime? @map("updated_at") @db.DateTime(0)

  @@map("customers")
}

model Stripe {
  id            Int               @id @default(autoincrement())
  walletAddress String?           @map("wallet_address") @db.VarChar(255)
  sessionId     String            @unique @map("session_id") @db.VarChar(255)
  mintStatus    StripeMintStatus? @default(MINTING) @map("mint_status")
  qty           Float?
  createdAt     DateTime          @default(now()) @map("created_at") @db.DateTime(0)

  @@map("stripe")
}

model EnergyAreaCoordinates {
  id           Int     @id @default(autoincrement())
  energyAreaId Int     @default(0) @map("energy_area_id")
  lat          Decimal @default(0.000000) @db.Decimal(20, 6)
  lng          Decimal @default(0.000000) @db.Decimal(20, 6)

  @@map("energy_area_coordinates")
}

model EnergyArea {
  id                 Int       @id @default(autoincrement())
  reference          String?   @map("reference") @db.VarChar(50)
  inclination        Float?
  kWhP               Float?    @map("kWh_p")
  kWhInversor        Float?    @map("kWh_inversor")
  nPlaques           Int?      @map("n_plaques")
  creationDt         DateTime? @default(dbgenerated("(curdate())")) @map("creation_dt") @db.DateTime(0)
  updateDt           DateTime? @map("update_dt") @db.Timestamp(0)
  type               String?   @map("type") @db.VarChar(50)
  origin             String?   @default("CatastRo") @map("origin") @db.VarChar(50)
  m2                 Int?      @map("m2")
  cadastralReference String?   @map("cadastral_reference") @db.VarChar(50)
  geojsonFeature     String?   @map("geojson_feature") @db.LongText
  locationId         Int?      @map("location_id")

  @@map("energy_areas")
}

model EnergyBlock {
  id               Int       @id @default(autoincrement())
  reference        String    @default("0") @map("reference") @db.VarChar(50)
  expirationDt     DateTime? @map("expiration_dt") @db.DateTime(0)
  activeInit       DateTime  @default(dbgenerated("('00:00:00')")) @map("active_init") @db.Time(0)
  activeEnd        DateTime  @default(dbgenerated("('00:00:00')")) @map("active_end") @db.Time(0)
  consumptionPrice Float?    @map("consumption_price")
  generationPrice  Float?    @map("generation_price")
  providerId       Int       @default(0) @map("provider_id")
  createdAt        DateTime  @default(dbgenerated("(curdate())")) @map("created_at") @db.DateTime(0)
  updatedAt        DateTime? @default(now()) @map("updated_at") @db.DateTime(0)

  @@map("energy_blocks")
}

model EnergyRegister {
  id                  Int       @id @default(autoincrement())
  infoDt              DateTime? @map("info_dt") @db.DateTime(0)
  cupsId              Int?      @map("cups_id")
  import              Float?
  consumption         Float?
  communityGeneration Float?    @map("community_generation")
  virtualGeneration   Float?    @map("virtual_generation")
  export              Float?
  generation          Float?
  origin              String?   @map("origin") @db.VarChar(200)
  type                String?   @map("type") @db.VarChar(200)
  createdAt           DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt           DateTime? @map("updated_at") @db.DateTime(0)

  @@index([cupsId], map: "cups_id")
  @@index([infoDt], map: "info_dt")
  @@map("energy_registers")
}

model EnergyTransaction {
  id                   Int       @id @default(autoincrement())
  cupsId               Int?      @map("cups_id")
  infoDt               DateTime? @map("info_dt") @db.DateTime(0)
  kwhIn                Float?    @map("kwh_in")
  kwhOut               Float?    @map("kwh_out")
  kwhOutVirtual        Float?    @map("kwh_out_virtual")
  kwhSurplus           Float?    @map("kwh_surplus")
  kwhInPrice           Float?    @map("kwh_in_price")
  kwhOutPrice          Float?    @map("kwh_out_price")
  kwhInPriceCommunity  Float?    @map("kwh_in_price_community")
  kwhOutPriceCommunity Float?    @map("kwh_out_price_community")
  txKwhIn              String?   @map("tx_kwh_in") @db.VarChar(100)
  txKwhOut             String?   @map("tx_kwh_out") @db.VarChar(100)
  blockId              Int?      @map("block_id")
  createdAt            DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt            DateTime? @map("updated_at") @db.DateTime(0)

  @@map("energy_transactions")
}

model EnergyHourly {
  id                   Int       @id @default(autoincrement())
  cupsId               Int?      @map("cups_id")
  infoDt               DateTime? @map("info_dt") @db.DateTime(0)
  kwhIn                Float?    @map("kwh_in")
  kwhInVirtual         Float?    @map("kwh_in_virtual")
  kwhInShared          Float?    @map("kwh_in_shared")
  kwhOut               Float?    @map("kwh_out")
  kwhOutVirtual        Float?    @map("kwh_out_virtual")
  kwhOutShared         Float?    @map("kwh_out_shared")
  kwhInPrice           Float?    @map("kwh_in_price")
  kwhOutPrice          Float?    @map("kwh_out_price")
  kwhInPriceCommunity  Float?    @map("kwh_in_price_community")
  kwhOutPriceCommunity Float?    @map("kwh_out_price_community")
  production           Float?    @map("production")
  battery              Float?    @map("battery")
  shares               Float?    @map("shares")
  origin               String?   @map("origin") @db.VarChar(255)
  type                 String?   @map("type") @db.VarChar(255)
  createdAt            DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt            DateTime? @map("updated_at") @db.DateTime(0)

  @@map("energy_hourly")
}

model Location {
  id           Int     @id @default(autoincrement())
  municipality String? @map("municipality") @db.VarChar(50)
  province     String? @map("province") @db.VarChar(50)

  @@map("locations")
}

model Provider {
  id       Int     @id @default(autoincrement())
  provider String? @map("provider") @db.VarChar(50)

  @@map("providers")
}

model SmartContract {
  id              Int     @id @default(autoincrement())
  name            String  @default("0") @map("name") @db.VarChar(50)
  contractAddress String? @map("contract_address") @db.VarChar(100)
  blockchainId    Int?    @map("blockchain_id")

  @@map("smart_contracts")
}

model Trades {
  id                 Int       @id @default(autoincrement())
  energyHourlyFromId Int       @map("energy_hourly_from_id")
  energyHourlyToId   Int       @map("energy_hourly_to_id")
  fromCupsId         Int       @map("from_cups_id")
  toCupsId           Int       @map("to_cups_id")
  action             String    @map("action") @db.VarChar(50)
  tradedKwh          Float?    @map("traded_kwh")
  cost               Float?    @map("cost")
  previousKwh        Float?    @map("previous_kwh")
  currentKwh         Float?    @map("current_kwh")
  infoDt             DateTime? @map("info_dt") @db.DateTime(0)
  createdDt          DateTime? @default(now()) @map("created_dt") @db.DateTime(0)
  updatedDT          DateTime? @map("updated_dt") @db.DateTime(0)

  @@map("trades")
}

model DatadisEnergyRegister {
  id              Int       @id @default(autoincrement())
  infoDt          DateTime? @map("info_dt") @db.DateTime(0)
  cupsId          Int?      @map("cups_id")
  transactionId   Int?      @map("transaction_id")
  import          Float?    @map("import")
  export          Float?    @map("export")
  txImport        String?   @map("tx_import")
  txExport        String?   @map("tx_export")
  updatesCounter  Int?      @map("updates_counter")
  updateshistoric Json?     @map("updates_historic") @db.Json
  createdAt       DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt       DateTime? @map("updated_at") @db.DateTime(0)

  @@index([cupsId], map: "cups_id")
  @@index([infoDt], map: "info_dt")
  @@map("datadis_energy_registers")
}

model EnergyRegistersLog {
  id         Int       @id @default(autoincrement())
  cups       String?   @map("cups") @db.VarChar(100)
  nRegisters Int?      @map("n_registers")
  creationDt DateTime? @default(dbgenerated("(curdate())")) @map("creation_dt") @db.Timestamp(0)

  @@map("energy_registers_logs")
}

model InverterEnergyRegister {
  id            Int       @id @default(autoincrement())
  infoDt        DateTime? @map("info_dt") @db.DateTime(0)
  cupsId        Int?      @map("cups_id")
  import        Float?
  consumption   Float?
  export        Float?
  generation    Float?
  transactionId Float?    @map("transaction_id")
  createdAt     DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime? @map("updated_at") @db.DateTime(0)

  @@index([cupsId], map: "cups_id")
  @@index([infoDt], map: "info_dt")
  @@map("inverter_energy_registers")
}

model Log {
  id                 Int         @id @default(autoincrement())
  origin             String?     @map("origin") @db.VarChar(100)
  cups               String?     @map("cups") @db.VarChar(100)
  cupsId             Int?        @map("cups_id")
  status             LogsStatus? @map("status")
  operation          String?     @map("operation") @db.VarChar(200)
  nAffectedRegisters Int?        @map("n_affected_registers")
  log                String      @map("log") @db.LongText
  errorMessage       String      @map("error_message") @db.LongText
  creationDt         DateTime?   @default(now()) @map("creation_dt") @db.DateTime(0)

  @@map("logs")
}

enum LogsStatus {
  error
  success
  warning
}

enum CupsType {
  consumer
  producer
  prosumer
  community
}

enum StripeMintStatus {
  MINTING
  ACCEPTED
  ERROR
}

enum TradeTypes {
  PREFERRED
  EQUITABLE
}

model Proposals {
  id             Int       @id @default(autoincrement()) @map("id")
  proposal       String?   @map("proposal") @db.VarChar(255)
  description    String?   @map("description") @db.Text
  communityId    Int?      @map("community_id") @db.Int
  userId         Int?      @map("user_id") @db.Int
  expirationDt   DateTime? @map("expiration_dt")
  status         String?   @map("status") @db.VarChar(255)
  resultOptionId Int?      @map("result_option_id")
  type           String?   @map("type") @db.VarChar(255)
  transparent    Int?      @map("transparent") @db.TinyInt
  quorum         Float?    @map("quorum")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("proposals")
}

model ProposalsOptions {
  id         Int      @id @default(autoincrement()) @map("id")
  proposalId Int?     @map("proposal_id") @db.Int
  option     String?  @map("option") @db.VarChar(255)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("proposals_options")
}

model Votes {
  id         Int      @id @default(autoincrement()) @map("id")
  proposalId Int?     @map("proposal_id") @db.Int
  optionId   Int?     @map("option_id") @db.Int
  userId     Int?     @map("user_id") @db.Int
  voteValue  Float?   @map("vote_value")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("votes")
}

model Shares {
  id          Int      @id @default(autoincrement()) @map("id")
  communityId Int?     @map("community_id") @db.Int
  customerId  Int?     @map("customer_id") @db.Int
  shares      Float?   @map("shares")
  status      String?  @map("status")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("shares")
}

model Responses {
  id               Int      @id @default(autoincrement()) @map("id")
  proposalId       Int?     @map("proposal_id") @db.Int
  proposalOptionId Int?     @map("proposal_option_id") @db.Int
  userId           Int?     @map("user_id") @db.Int
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("responses")
}

model NonWorkingDays {
  id         Int       @id @default(autoincrement()) @map("id")
  date       DateTime? @map("date")
  providerId Int?      @map("provider_id") @db.Int
  price      Float?    @map("price")
  rate       String?   @map("rate") @db.VarChar(255)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("non_working_days")
}

model Notification {
  id                     Int       @id @default(autoincrement())
  notificationCategoryId Int?      @map("notification_category_id")
  notification           String?   @db.VarChar(50)
  code                   String?   @db.VarChar(50)
  createdDt              DateTime  @default(now()) @map("created_dt") @db.DateTime(0)
  updatedDt              DateTime? @default(dbgenerated("(current_timestamp())")) @map("updated_dt") @db.DateTime(0)

  @@map("notifications")
}

model NotificationCategory {
  id        Int       @id @default(autoincrement())
  category  String?   @db.VarChar(50)
  createdDt DateTime  @default(now()) @map("created_dt") @db.DateTime(0)
  updatedDt DateTime? @default(dbgenerated("(current_timestamp())")) @map("updated_dt") @db.DateTime(0)

  // notificationCategory  NotificationCategory? @relation(fields: [notificationCategoryId], references: [id])
  @@map("notifications_categories")
}

model UsersNotification {
  id             Int       @id @default(autoincrement())
  userId         Int?      @map("user_id")
  notificationId Int?      @map("notification_id")
  active         Int?      @db.TinyInt
  createdDt      DateTime  @default(now()) @map("created_dt") @db.DateTime(0)
  updatedDt      DateTime? @default(dbgenerated("(current_timestamp())")) @map("updated_dt") @db.DateTime(0)

  // notification          Notification? @relation(fields: [notificationId], references: [id])
  //  notifications         Notification[]
  @@map("users_notifications")
}

model UsersNotificationCategory {
  id                     Int       @id @default(autoincrement())
  userId                 Int?      @map("user_id")
  notificationCategoryId Int?      @map("notification_categories_id")
  active                 Int?      @db.TinyInt
  createdDt              DateTime  @default(now()) @map("created_dt") @db.DateTime(0)
  updatedDt              DateTime? @default(dbgenerated("(current_timestamp())")) @map("updated_dt") @db.DateTime(0)

  //  notificationCategory  NotificationCategory? @relation(fields: [notificationCategoryId], references: [id])
  @@map("users_notifications_categories")
}

model UsersNotificationHistoric {
  id             Int       @id @default(autoincrement())
  userId         Int?      @map("user_id")
  notificationId Int?      @map("notification_id")
  email          String?   @db.VarChar(50)
  subject        String?   @db.VarChar(50)
  createdDt      DateTime  @default(now()) @map("created_dt") @db.DateTime(0)
  updatedDt      DateTime? @default(dbgenerated("(current_timestamp())")) @map("updated_dt") @db.DateTime(0)

  // notification          Notification? @relation(fields: [notificationId], references: [id])
  @@map("users_notifications_historic")
}
