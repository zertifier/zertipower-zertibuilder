generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int         @id @default(autoincrement())
  username              String     @db.VarChar(255)
  firstname             String     @db.VarChar(255)
  lastname              String     @db.VarChar(255)
  password              String     @db.VarChar(255)
  email                 String     @db.VarChar(255)
  wallet_address        String?     @db.VarChar(255)
  created_at            DateTime    @default(now())
  updated_at            DateTime    @default(now()) @updatedAt
  recover_password_code String?
  role_id               Int
  UserOatuh             UserOatuh[]
  role                  Role        @relation(fields: [role_id], references: [id])

  @@index([email], map: "email")
  @@index([role_id], map: "users_role_id_fkey")
  @@map("users")
}

model UserOatuh {
  oauth_id String
  type     String
  user_id  Int
  user     User   @relation(fields: [user_id], references: [id])

  @@id([oauth_id, user_id])
  @@index([user_id], map: "user_oauth_user_id_fkey")
  @@map("user_oauth")
}

model Permission {
  resource       String
  action         String
  RolePermission RolePermission[]

  @@id([resource, action])
  @@map("permissions")
}

model RolePermission {
  role_id             Int
  permission_resource String
  permission_action   String
  allow               Boolean
  permission          Permission @relation(fields: [permission_resource, permission_action], references: [resource, action], onDelete: Cascade)
  role                Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_action, permission_resource])
  @@index([permission_resource, permission_action], map: "role_permission_permission_resource_permission_action_fkey")
  @@map("role_permission")
}

model Token {
  id              Int      @id @default(autoincrement())
  token           String   @db.VarChar(300)
  expiration_time DateTime
  user_id         Int

  @@map("user_tokens")
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(255)
  RolePermission RolePermission[]
  users          User[]

  @@map("roles")
}

model Report {
  id         Int      @id @default(autoincrement())
  name       String
  sql        String
  params     String
  columns    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("reports")
}

model blockchains {
  blockchain_id     Int     @id
  blockchain_name   String? @db.VarChar(50)
  rpc_url           String? @db.VarChar(50)
  blockchain_tx_url String? @db.VarChar(50)
}

model calendar {
  day          DateTime  @unique(map: "day") @db.Date
  weekday      String?   @db.VarChar(50)
  day_type     String?   @db.VarChar(50)
  festive_type String?   @db.VarChar(50)
  festivity    String?   @db.VarChar(50)
  updated_at   DateTime? @default(now()) @db.DateTime(0)
  created_at   DateTime? @default(now()) @db.DateTime(0)
}

model communities {
  id           Int       @id @default(autoincrement())
  name         String?   @db.VarChar(50)
  test         Int?      @default(dbgenerated("(current_timestamp())")) @db.TinyInt
  energy_price Float?
  lat          Float?
  lng          Float?
  location_id  Int?
  created_at   DateTime? @default(now()) @db.DateTime(0)
  updated_at   DateTime? @db.DateTime(0)
}

model cups {
  id                   Int        @id @default(autoincrement())
  cups                 String     @default("") @db.VarChar(50)
  provider_id          Int        @default(0)
  community_id         Int        @default(0)
  surplus_distribution String?    @db.LongText
  location_id          String     @default("") @db.VarChar(50)
  address              String     @default("") @db.VarChar(50)
  customer_id          Int?
  lng                  Float?
  lat                  Float?
  type                 cups_type?
  datadis_active       Int?       @default(0) @db.TinyInt
  datadis_user         String?    @db.VarChar(50)
  datadis_password     String?    @db.VarChar(50)
  smart_meter_active   Int?       @default(0) @db.TinyInt
  smart_meter_model    String     @default("") @db.VarChar(100)
  smart_meter_api_key  String?    @db.VarChar(50)
  inverter_active      Int        @default(0) @db.TinyInt
  inverter_model       String?    @db.VarChar(100)
  inverter_api_key     String?    @db.VarChar(50)
  created_at           DateTime?  @default(now()) @db.DateTime(0)
  updated_at           DateTime?  @db.DateTime(0)
}

model customers {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(50)
  created_at     DateTime? @default(now()) @db.DateTime(0)
  updated_at     DateTime? @db.DateTime(0)
  wallet_address String?   @db.VarChar(200)
}

model energy_area_coordinates {
  id             Int     @id @default(autoincrement())
  energy_area_id Int     @default(0)
  lat            Decimal @default(0.000000) @db.Decimal(20, 6)
  lng            Decimal @default(0.000000) @db.Decimal(20, 6)
}

model energy_areas {
  id                  Int       @id @default(autoincrement())
  reference           String?   @db.VarChar(50)
  inclination         Float?
  kWh_p               Float?
  kWh_inversor        Float?
  n_plaques           Int?
  creation_dt         DateTime? @default(dbgenerated("(curdate())")) @db.DateTime(0)
  update_dt           DateTime? @db.Timestamp(0)
  type                String?   @db.VarChar(50)
  origin              String?   @default("CatastRo") @db.VarChar(50)
  m2                  Int?
  cadastral_reference String?   @db.VarChar(50)
  geojson_feature     String?   @db.LongText
  location_id         Int?
}

model energyBlocks {
  id                Int       @id @default(autoincrement())
  reference         String    @default("0") @db.VarChar(50)
  expiration_dt     DateTime? @db.DateTime(0)
  active_init       DateTime  @default(dbgenerated("('00:00:00')")) @db.Time(0)
  active_end        DateTime  @default(dbgenerated("('00:00:00')")) @db.Time(0)
  consumption_price Float?
  generation_price  Float?
  provider_id       Int       @default(0)
  created_at        DateTime  @default(dbgenerated("(curdate())")) @db.DateTime(0)
  updated_at        DateTime? @default(now()) @db.DateTime(0)

  @@map("energy_blocks")
}

model energyRegisters {
  id          Int       @id @default(autoincrement())
  info_dt     DateTime? @db.DateTime(0)
  cups_id     Int?
  import      Float?
  consumption Float?
  export      Float?
  generation  Float?
  created_at  DateTime? @default(now()) @db.DateTime(0)
  updated_at  DateTime? @db.DateTime(0)

  @@index([cups_id], map: "cups_id")
  @@index([info_dt], map: "info_dt")
  @@map("energy_registers")
}

model energyTransactions {
  id            Int       @id @default(autoincrement())
  cups_id       Int?
  info_dt       DateTime? @db.DateTime(0)
  kwh_in        Float?
  kwh_out       Float?
  kwh_surplus   Float?
  kwh_in_price  Float?
  kwh_out_price Float?
  tx_kwh_in     String?   @db.VarChar(100)
  tx_kwh_out    String?   @db.VarChar(100)
  block_id      Int?
  created_at    DateTime? @default(now()) @db.DateTime(0)
  updated_at    DateTime? @db.DateTime(0)

  @@map("energy_transactions")
}

model locations {
  id           Int     @id @default(autoincrement())
  municipality String? @db.VarChar(50)
  province     String? @db.VarChar(50)
}

model providers {
  id       Int     @id @default(autoincrement())
  provider String? @db.VarChar(50)
}

model smartContracts {
  id               Int     @id @default(autoincrement())
  name             String  @default("0") @db.VarChar(50)
  contract_address String? @db.VarChar(100)
  blockchain_id    Int?

  @@map("smart_contracts")
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
// view energy_registers_original_monthly {
//   cups_id     Int?
//   year        Int?
//   month       Int?
//   import      Float?
//   consumption Float?
//   export      Float?
//   generation  Float?
//
//   @@ignore
// }

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
// view energy_registers_original_hourly {
//   cups_id       Int?
//   info_datetime DateTime? @db.DateTime(0)
//   import        Float?
//   consumption   Float?
//   export        Float?
//   generation    Float?
//
//   @@ignore
// }

enum cups_type {
  consumer
  producer
  prosumer
}

enum read_data_log_status {
  ERROR
  SUCCESS
  WARNING
}
